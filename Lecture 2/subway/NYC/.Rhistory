source('C:/Users/Alfred/Dropbox/AGResearch_in_progress/_Course_2018_NYU-Matching_Models_and_their_Applications/_applications/02-appli-networks/shortestpath/subway.R')
load("C:/Users/Alfred/Dropbox/AGResearch_in_progress/_Course_2018_NYU-Matching_Models_and_their_Applications/_applications/02-appli-networks/mincostflow/DataNYC.RData")
View(arcs)
View(arcs)
View(nodes)
View(nodes)
source('C:/Users/Alfred/Dropbox/AGResearch_in_progress/_Course_2018_NYU-Matching_Models_and_their_Applications/_applications/02-appli-networks/mincostflow/lucas.R')
source('C:/Users/Alfred/Dropbox/AGResearch_in_progress/_Course_2018_NYU-Matching_Models_and_their_Applications/_applications/02-appli-networks/mincostflow/lucas.R')
length(nodes)
length(nodespath)
4*(1:30)
nodespathbis = nodespath[4*(1:30)]
nodespathbis
plot(shpNYC)
points(nodes[nodespathbis,], col="red")
points(nodes[nodespath,], col="red")
A = sparseMatrix(i=arcs[,1],j=1:nbArcs,dims=c(nbArcs,nbNodes),x=-1) + sparseMatrix(i=arcs[,2],j=1:nbArcs, dims=c(nbArcs,nbNodes),x=1)
library('gurobi')
library('Matrix')
city = 'NYC'
originNode = 446 # Union Sq.
destinationNode = 465 # 59th St in Brooklyn
themargin=-c(1,1,.5,0.2)
thePath = getwd()
arcs = as.matrix(read.csv(paste0(thepath,"/", city, "/arcs.csv"),sep=";", header=FALSE)) # loads the data
nodes = as.matrix(read.csv(paste0(thepath,"/", city,"/nodes.csv"),sep=";", header=FALSE)) # loads the data
library('gurobi')
library('Matrix')
city = 'NYC'
originNode = 446 # Union Sq.
destinationNode = 465 # 59th St in Brooklyn
themargin=-c(1,1,.5,0.2)
thePath = getwd()
arcs = as.matrix(read.csv(paste0(thepath,"/", city, "/arcs.csv"),sep=";", header=FALSE)) # loads the data
getwd()
thepath = getwd()
arcs = as.matrix(read.csv(paste0(thepath,"/", city, "/arcs.csv"),sep=";", header=FALSE)) # loads the data
nodes = as.matrix(read.csv(paste0(thepath,"/", city,"/nodes.csv"),sep=";", header=FALSE)) # loads the data
nbNodes = max(arcs[,1])
nbArcs = dim(arcs)[1]
namesNodes = nodes[,1]
n = rep(0,nbNodes) # construct vector of exiting flow
n[c(originNode,destinationNode)]=c(-1,1)
Nabla =  sparseMatrix(i=1:nbArcs,j=arcs[,1],dims=c(nbArcs,nbNodes),x=-1) + sparseMatrix(i=1:nbArcs,j=arcs[,2],
dims=c(nbArcs,nbNodes),x=1)
A = sparseMatrix(i=arcs[,1],j=1:nbArcs,dims=c(nbArcs,nbNodes),x=-1) + sparseMatrix(i=arcs[,2],j=1:nbArcs, dims=c(nbArcs,nbNodes),x=1)
A = sparseMatrix(i=arcs[,1],j=1:nbArcs,dims=c(nbNodes,nbArcs),x=-1) + sparseMatrix(i=arcs[,2],j=1:nbArcs, dims=c(nbNodes,nbArcs),x=1)
Cost <- arcs[,3] # construct (minus) distance matrix
Cost[1:4]
pi = result$x
result = gurobi ( list(A=t(Nabla),obj=Cost,modelsense='min',rhs=n,sense='=',start=matrix(0,nbArcs,1)), params=NULL)
pi = result$x
length(pi)
pi
source('C:/Users/Alfred/Dropbox/Collaborations/__Teaching/matheconcode/_applications/02-appli-networks/subway/subway.R')
source('C:/Users/Alfred/Dropbox/Collaborations/__Teaching/matheconcode/_applications/02-appli-networks/subway/subway.R')
source('C:/Users/Alfred/Dropbox/Collaborations/__Teaching/matheconcode/_applications/02-appli-networks/subway/subway.R')
source('C:/Users/Alfred/Dropbox/Collaborations/__Teaching/matheconcode/_applications/02-appli-networks/subway/subway.R')
source('C:/Users/Alfred/Dropbox/Collaborations/__Teaching/matheconcode/_applications/02-appli-networks/subway/subway.R')
load("C:/Users/Alfred/Dropbox/Collaborations/__Teaching/matheconcode/_applications/02-appli-networks/NYCroads/DataNYC.RData")
dim(arcs)
View(arcs)
View(arcs)
View(nodes)
View(nodes)
source('C:/Users/Alfred/Dropbox/Collaborations/__Teaching/matheconcode/_applications/02-appli-networks/subway/subway.R')
rm(list=ls())
library('gurobi')
require('Matrix')
require('igraph')
plotCurrentNetwork = function (network, curNode, nbNodes)
{sizeNodes= rep(1,nbNodes)
sizeNodes[originNode]=4
sizeNodes[destinationNode]=4
sizeNodes[curNode]=4
labelNodes = rep(NA,nbNodes)
labelNodes[originNode]=namesNodes[originNode]
labelNodes[destinationNode]=namesNodes[destinationNode]
labelNodes[curNode]=namesNodes[curNode]
plot.igraph(network,vertex.label=labelNodes, vertex.label.cex=1,vertex.size=sizeNodes, edge.arrow.size=0, layout = geoCoordinates)
}
thePath = getwd()
arcs = as.matrix(read.csv(paste0(thePath,"/arcs_no_connecting_time.csv"),sep=",", header=TRUE)) # loads the data
setwd("C:/Users/Alfred/Dropbox/Collaborations/__Teaching/matheconcode/_applications/02-appli-networks/subway/NYC")
thePath = getwd()
arcs = as.matrix(read.csv(paste0(thePath,"/arcs_no_connecting_time.csv"),sep=",", header=TRUE)) # loads the data
nodes = as.matrix(read.csv(paste0(thePath,"/nodes.csv"),sep=",", header=TRUE)) # loads the data
class(arcs) <- "numeric"
namesNodes=nodes[,1]
routeNodes = nodes[,7]
incomingFlow = nodes[,2]
class(incomingFlow)="numeric"
incomingFlow = incomingFlow / sum(incomingFlow)
originNode <- 452 #Union Sq
destinationNode<- 471  #59 St
speed=2
geoCoordinates = nodes[,3:4]
class(geoCoordinates)="numeric"
nbNodes = max(arcs[,1])
nbArcs = dim(arcs)[1]
n = rep(0,nbNodes) # construct vector of exiting flow
n[c(originNode,destinationNode)]=c(-1,1)
Nabla =  sparseMatrix(i=1:nbArcs,j=arcs[,1],dims=c(nbArcs,nbNodes),x=-1) + sparseMatrix(i=1:nbArcs,j=arcs[,2],dims=c(nbArcs,nbNodes),x=1)
Phi <- -arcs[,4] # construct (minus) distance matrix
result = gurobi ( list(A=t(Nabla),obj=Phi,modelsense='max',rhs=n,sense='=',start=matrix(0,nbArcs,1)), params=NULL)
pi = result$x
distance = -result$objval
newyork=graph_from_edgelist(arcs[,1:2])
cont = TRUE
i = originNode
writeLines(paste0(namesNodes[i]," (#", i,")"))
eqpath = which(pi>0)
rank = 0
while(cont)
{
plotCurrentNetwork(newyork,i, nbNodes)
Sys.sleep(1/speed)
rank = rank+1
leavingi = which(Nabla[,i]==-1)
a = intersect(eqpath,leavingi)[1]
j = which(Nabla[a,]==1)[1]
writeLines(paste0(rank,": ", namesNodes[j], " ",routeNodes[j], " (#", j,")"))
i = j
if(j==destinationNode) {cont<-FALSE}
}
